1)fibonacci

py 
def fibonacci_iter(n):
    if n < 0:
        return -1, 1
    if n == 0 or n == 1:
        return n, 1
    steps = 0
    a, b = 0, 1
    for i in range(2, n + 1):
        c = a + b
        a = b
        b = c
        steps += 1
    return b, steps

def fibonacci_recur(n):
    if n < 0:
        return -1, 1
    if n == 0 or n == 1:
        return n, 1
    fib1, steps1 = fibonacci_recur(n - 1)
    fib2, steps2 = fibonacci_recur(n - 2)
    return fib1 + fib2, steps1 + steps2 + 1

if __name__ == '__main__':
    n = int(input("Enter a number: "))
    iter_result, iter_steps = fibonacci_iter(n)
    print("Iterative:", iter_result)
    print("Steps:", iter_steps)
    
    recur_result, recur_steps = fibonacci_recur(n)
    print("Recursive:", recur_result)
    print("Steps:", recur_steps)

java
import java.util.Scanner;

public class Fibonacci {

    // Iterative Fibonacci method
    public static int[] fibonacciIter(int n) {
        if (n < 0) return new int[] {-1, 1};
        if (n == 0 || n == 1) return new int[] {n, 1};

        int steps = 0;
        int a = 0, b = 1;
        for (int i = 2; i <= n; i++) {
            int c = a + b;
            a = b;
            b = c;
            steps++;
        }
        return new int[] {b, steps};
    }

    // Recursive Fibonacci method
    public static int[] fibonacciRecur(int n) {
        if (n < 0) return new int[] {-1, 1};
        if (n == 0 || n == 1) return new int[] {n, 1};
        
        int[] result1 = fibonacciRecur(n - 1);
        int[] result2 = fibonacciRecur(n - 2);
        
        return new int[] {result1[0] + result2[0], result1[1] + result2[1] + 1};
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int n = scanner.nextInt();

        int[] iterResult = fibonacciIter(n);
        System.out.println("Iterative: " + iterResult[0]);
        System.out.println("Steps: " + iterResult[1]);

        int[] recurResult = fibonacciRecur(n);
        System.out.println("Recursive: " + recurResult[0]);
        System.out.println("Steps: " + recurResult[1]);
    }
}

c++
#include <iostream>
using namespace std;

// Iterative Fibonacci method
pair<int, int> fibonacciIter(int n) {
    if (n < 0) return {-1, 1};
    if (n == 0 || n == 1) return {n, 1};
    
    int steps = 0;
    int a = 0, b = 1;
    for (int i = 2; i <= n; i++) {
        int c = a + b;
        a = b;
        b = c;
        steps++;
    }
    return {b, steps};
}

// Recursive Fibonacci method
pair<int, int> fibonacciRecur(int n) {
    if (n < 0) return {-1, 1};
    if (n == 0 || n == 1) return {n, 1};
    
    pair<int, int> result1 = fibonacciRecur(n - 1);
    pair<int, int> result2 = fibonacciRecur(n - 2);
    
    return {result1.first + result2.first, result1.second + result2.second + 1};
}

int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;

    pair<int, int> iterResult = fibonacciIter(n);
    cout << "Iterative: " << iterResult.first << endl;
    cout << "Steps: " << iterResult.second << endl;

    pair<int, int> recurResult = fibonacciRecur(n);
    cout << "Recursive: " << recurResult.first << endl;
    cout << "Steps: " << recurResult.second << endl;

    return 0;
}






2) Huffman 

py
import heapq

class node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ""
    
    def __lt__(self, other):
        return self.freq < other.freq
    
def printNodes(node, val=""):
    newval = val + node.huff
    if node.left:
        printNodes(node.left, newval)
    if node.right:
        printNodes(node.right, newval)
    else:
        print(f"{node.symbol} -> {newval}")

chars = ["a", "b", "c", "d", "e", "f"]
freqs = [5, 9, 12, 13, 16, 45]
nodes = []

for i in range(len(chars)):
    heapq.heappush(nodes, node(freqs[i], chars[i]))

while len(nodes) > 1:
    left = heapq.heappop(nodes)
    right = heapq.heappop(nodes)
    left.huff = "0"
    right.huff = "1"
    newnode = node(left.freq + right.freq, left.symbol + right.symbol, left, right)
    heapq.heappush(nodes, newnode)

printNodes(nodes[0])

java
import java.util.PriorityQueue;

class Node implements Comparable<Node> {
    int freq;
    String symbol;
    Node left, right;
    String huff = "";

    public Node(int freq, String symbol) {
        this.freq = freq;
        this.symbol = symbol;
        this.left = null;
        this.right = null;
    }

    @Override
    public int compareTo(Node other) {
        return this.freq - other.freq;
    }
}

public class HuffmanCoding {

    public static void printNodes(Node node, String val) {
        if (node != null) {
            String newVal = val + node.huff;
            if (node.left == null && node.right == null) {
                System.out.println(node.symbol + " -> " + newVal);
            }
            printNodes(node.left, newVal);
            printNodes(node.right, newVal);
        }
    }

    public static void main(String[] args) {
        String[] chars = {"a", "b", "c", "d", "e", "f"};
        int[] freqs = {5, 9, 12, 13, 16, 45};
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        
        // Creating the priority queue with initial nodes
        for (int i = 0; i < chars.length; i++) {
            pq.add(new Node(freqs[i], chars[i]));
        }

        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();

            left.huff = "0";
            right.huff = "1";

            Node newNode = new Node(left.freq + right.freq, left.symbol + right.symbol);
            newNode.left = left;
            newNode.right = right;

            pq.add(newNode);
        }

        Node root = pq.poll();
        printNodes(root, "");
    }
}

c++
#include <iostream>
#include <queue>
#include <vector>
#include <string>

using namespace std;

// Node class to represent each node in the Huffman tree
class Node {
public:
    int freq;
    string symbol;
    Node* left;
    Node* right;
    string huff;

    Node(int freq, string symbol) {
        this->freq = freq;
        this->symbol = symbol;
        left = right = nullptr;
        huff = "";
    }

    bool operator>(const Node& other) const {
        return freq > other.freq;
    }
};

// Function to print the Huffman codes
void printNodes(Node* node, string val) {
    if (node != nullptr) {
        string newVal = val + node->huff;
        if (node->left == nullptr && node->right == nullptr) {
            cout << node->symbol << " -> " << newVal << endl;
        }
        printNodes(node->left, newVal);
        printNodes(node->right, newVal);
    }
}

int main() {
    vector<string> chars = {"a", "b", "c", "d", "e", "f"};
    vector<int> freqs = {5, 9, 12, 13, 16, 45};

    priority_queue<Node*, vector<Node*>, greater<Node*>> pq;

    // Create priority queue with initial nodes
    for (int i = 0; i < chars.size(); i++) {
        pq.push(new Node(freqs[i], chars[i]));
    }

    while (pq.size() > 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();

        left->huff = "0";
        right->huff = "1";

        Node* newNode = new Node(left->freq + right->freq, left->symbol + right->symbol);
        newNode->left = left;
        newNode->right = right;

        pq.push(newNode);
    }

    Node* root = pq.top();
    printNodes(root, "");

    return 0;
}






3) knapsack
py
class Item:
    def __init__(self, profit, weight):
        self.profit = profit
        self.weight = weight

def fractionalKnapsack(w, arr):
    arr.sort(key=lambda x: x.profit/x.weight, reverse=True)
    finalValue = 0.0
    for item in arr:
        if w >= item.weight:
            finalValue += item.profit
            w -= item.weight
        else:
            finalValue += item.profit * (w/item.weight)
            break
    return finalValue

if __name__ == "__main__":
    n = int(input("Enter number of items-\n"))
    arr = []
    for i in range(n):
        profit = int(input("Enter profit of item " + str(i + 1) + "-\n"))
        weight = int(input("Enter weight of item " + str(i + 1) + "-\n"))
        arr.append(Item(profit, weight))
    w = int(input("Enter capacity of knapsack-\n"))
    print("Maximum value in knapsack: ", fractionalKnapsack(w, arr))

java
import java.util.*;

class Item {
    int profit;
    int weight;

    public Item(int profit, int weight) {
        this.profit = profit;
        this.weight = weight;
    }
}

public class FractionalKnapsack {

    // Function to solve the fractional knapsack problem
    public static double fractionalKnapsack(int w, List<Item> arr) {
        // Sort items based on the profit/weight ratio
        arr.sort((a, b) -> Double.compare((double) b.profit / b.weight, (double) a.profit / a.weight));
        
        double finalValue = 0.0;
        
        for (Item item : arr) {
            if (w >= item.weight) {
                finalValue += item.profit;
                w -= item.weight;
            } else {
                finalValue += item.profit * ((double) w / item.weight);
                break;
            }
        }
        return finalValue;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of items:");
        int n = sc.nextInt();

        List<Item> arr = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            System.out.println("Enter profit of item " + (i + 1) + ":");
            int profit = sc.nextInt();
            System.out.println("Enter weight of item " + (i + 1) + ":");
            int weight = sc.nextInt();
            arr.add(new Item(profit, weight));
        }

        System.out.println("Enter capacity of knapsack:");
        int w = sc.nextInt();

        double maxValue = fractionalKnapsack(w, arr);
        System.out.println("Maximum value in knapsack: " + maxValue);
    }
}

c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Item {
public:
    int profit;
    int weight;

    Item(int profit, int weight) {
        this->profit = profit;
        this->weight = weight;
    }
};

// Comparator function to sort items based on the profit/weight ratio
bool compare(Item a, Item b) {
    double ratio1 = (double)a.profit / a.weight;
    double ratio2 = (double)b.profit / b.weight;
    return ratio1 > ratio2;
}

double fractionalKnapsack(int W, vector<Item>& arr) {
    // Sort items based on profit/weight ratio
    sort(arr.begin(), arr.end(), compare);

    double finalValue = 0.0;
    for (auto& item : arr) {
        if (W >= item.weight) {
            finalValue += item.profit;
            W -= item.weight;
        } else {
            finalValue += item.profit * ((double)W / item.weight);
            break;
        }
    }
    return finalValue;
}

int main() {
    int n;
    cout << "Enter number of items: ";
    cin >> n;

    vector<Item> arr;
    for (int i = 0; i < n; i++) {
        int profit, weight;
        cout << "Enter profit of item " << (i + 1) << ": ";
        cin >> profit;
        cout << "Enter weight of item " << (i + 1) << ": ";
        cin >> weight;
        arr.push_back(Item(profit, weight));
    }

    int W;
    cout << "Enter capacity of knapsack: ";
    cin >> W;

    double maxValue = fractionalKnapsack(W, arr);
    cout << "Maximum value in knapsack: " << maxValue << endl;

    return 0;
}




4) knapsack 01
py
Check this code def knapsack_01(n, values, weights, W):
    dp = [[0] * (W+1) for _ in range(n+1)]

    for i in range(n+1):
        for w in range(W+1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i-1] <= w:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
            else:
                dp[i][w] = dp[i-1][w]
    
    selected_items = []
    i, w = n, W
    while i > 0 and w > 0:
        if dp[i][w] != dp[i-1][w]:
            selected_items.append(i-1)
            w -= weights[i-1]
        i -= 1
    
    return dp[n][W], selected_items

if __name__ == "__main__":
    n = 3
    values = [60, 100, 120]
    weights = [10, 20, 30]
    W = 50

    max_value, selected_items = knapsack_01(n, values, weights, W)
    print("Maximum value:", max_value)
    print("Selected items:", selected_items)

java
import java.util.ArrayList;
import java.util.List;

public class Knapsack {
    public static int[] knapsack01(int n, int[] values, int[] weights, int W) {
        int[][] dp = new int[n + 1][W + 1];

        // Fill the DP table
        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0;
                } else if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // Find selected items
        List<Integer> selectedItems = new ArrayList<>();
        int i = n, w = W;
        while (i > 0 && w > 0) {
            if (dp[i][w] != dp[i - 1][w]) {
                selectedItems.add(i - 1);
                w -= weights[i - 1];
            }
            i--;
        }

        // Convert selected items list to array
        int[] selectedItemsArray = new int[selectedItems.size()];
        for (int j = 0; j < selectedItems.size(); j++) {
            selectedItemsArray[j] = selectedItems.get(j);
        }

        return new int[]{dp[n][W], selectedItemsArray.length};
    }

    public static void main(String[] args) {
        int n = 3;
        int[] values = {60, 100, 120};
        int[] weights = {10, 20, 30};
        int W = 50;

        int[] result = knapsack01(n, values, weights, W);
        System.out.println("Maximum value: " + result[0]);
        System.out.print("Selected items: ");
        for (int i : result) {
            System.out.print(i + " ");
        }
    }
}

c++
#include <iostream>
#include <vector>
using namespace std;

pair<int, vector<int>> knapsack01(int n, vector<int>& values, vector<int>& weights, int W) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the DP table
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // Track selected items
    vector<int> selectedItems;
    int i = n, w = W;
    while (i > 0 && w > 0) {
        if (dp[i][w] != dp[i - 1][w]) {
            selectedItems.push_back(i - 1);
            w -= weights[i - 1];
        }
        i--;
    }

    return {dp[n][W], selectedItems};
}

int main() {
    int n = 3;
    vector<int> values = {60, 100, 120};
    vector<int> weights = {10, 20, 30};
    int W = 50;

    auto result = knapsack01(n, values, weights, W);
    cout << "Maximum value: " << result.first << endl;
    cout << "Selected items: ";
    for (int item : result.second) {
        cout << item << " ";
    }
    cout << endl;

    return 0;
}





5) nqueens

py
Check this out def solveNQueens(n: int, first_queen_col: int):
    col = set()
    posDiag = set()
    negDiag = set()

    res = []
    board = [["."] * n for _ in range(n)]

    def backtrack(r):
        if r == n:
            res.append(["".join(row) for row in board])
            return

        for c in range(n):
            if c in col or (r + c) in posDiag or (r - c) in negDiag:
                continue

            col.add(c)
            posDiag.add(r + c)
            negDiag.add(r - c)
            board[r][c] = "Q"

            backtrack(r + 1)

            col.remove(c)
            posDiag.remove(r + c)
            negDiag.remove(r - c)
            board[r][c] = "."

    col.add(first_queen_col)
    posDiag.add(0 + first_queen_col)
    negDiag.add(0 - first_queen_col)
    board[0][first_queen_col] = "Q"

    backtrack(1)  # Start with the second row
    return res

if __name__ == "__main__":
    n = 8
    first_queen_col = 1
    board = solveNQueens(n, first_queen_col)[0]
    for row in board:
        print(" ".join(row))

java
import java.util.*;

public class NQueens {

    public static List<List<String>> solveNQueens(int n, int firstQueenCol) {
        Set<Integer> col = new HashSet<>();
        Set<Integer> posDiag = new HashSet<>();
        Set<Integer> negDiag = new HashSet<>();
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];

        // Initialize the board with dots
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }

        // Set the first queen
        col.add(firstQueenCol);
        posDiag.add(0 + firstQueenCol);
        negDiag.add(0 - firstQueenCol);
        board[0][firstQueenCol] = 'Q';

        backtrack(n, 1, col, posDiag, negDiag, board, res);

        return res;
    }

    private static void backtrack(int n, int r, Set<Integer> col, Set<Integer> posDiag, Set<Integer> negDiag, char[][] board, List<List<String>> res) {
        if (r == n) {
            List<String> solution = new ArrayList<>();
            for (char[] row : board) {
                solution.add(new String(row));
            }
            res.add(solution);
            return;
        }

        for (int c = 0; c < n; c++) {
            if (col.contains(c) || posDiag.contains(r + c) || negDiag.contains(r - c)) {
                continue;
            }

            col.add(c);
            posDiag.add(r + c);
            negDiag.add(r - c);
            board[r][c] = 'Q';

            backtrack(n, r + 1, col, posDiag, negDiag, board, res);

            col.remove(c);
            posDiag.remove(r + c);
            negDiag.remove(r - c);
            board[r][c] = '.';
        }
    }

    public static void main(String[] args) {
        int n = 8;
        int firstQueenCol = 1;
        List<List<String>> solutions = solveNQueens(n, firstQueenCol);

        for (String row : solutions.get(0)) {
            System.out.println(row);
        }
    }
}

c++
#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>

using namespace std;

class NQueens {
public:
    vector<vector<string>> solveNQueens(int n, int firstQueenCol) {
        unordered_set<int> col, posDiag, negDiag;
        vector<vector<string>> res;
        vector<string> board(n, string(n, '.'));

        col.insert(firstQueenCol);
        posDiag.insert(0 + firstQueenCol);
        negDiag.insert(0 - firstQueenCol);
        board[0][firstQueenCol] = 'Q';

        backtrack(n, 1, col, posDiag, negDiag, board, res);

        return res;
    }

private:
    void backtrack(int n, int r, unordered_set<int>& col, unordered_set<int>& posDiag, unordered_set<int>& negDiag, vector<string>& board, vector<vector<string>>& res) {
        if (r == n) {
            res.push_back(board);
            return;
        }

        for (int c = 0; c < n; c++) {
            if (col.count(c) || posDiag.count(r + c) || negDiag.count(r - c)) {
                continue;
            }

            col.insert(c);
            posDiag.insert(r + c);
            negDiag.insert(r - c);
            board[r][c] = 'Q';

            backtrack(n, r + 1, col, posDiag, negDiag, board, res);

            col.erase(c);
            posDiag.erase(r + c);
            negDiag.erase(r - c);
            board[r][c] = '.';
        }
    }
};

int main() {
    int n = 8;
    int firstQueenCol = 1;
    NQueens nQueens;
    vector<vector<string>> solutions = nQueens.solveNQueens(n, firstQueenCol);

    for (const string& row : solutions[0]) {
        cout << row << endl;
    }

    return 0;
}
